var GeoJSON=function(c,b){var e=function(n,l,q){var m;switch(n.type){case"Point":l.position=new google.maps.LatLng(n.coordinates[1],n.coordinates[0]);m=new google.maps.Marker(l);
if(q){m.set("geojsonProperties",q);}break;case"MultiPoint":m=[];for(var r=0;r<n.coordinates.length;r++){l.position=new google.maps.LatLng(n.coordinates[r][1],n.coordinates[r][0]);
m.push(new google.maps.Marker(l));}if(q){for(var o=0;o<m.length;o++){m[o].set("geojsonProperties",q);}}break;case"LineString":var x=[];for(var r=0;r<n.coordinates.length;
r++){var s=n.coordinates[r];var u=new google.maps.LatLng(s[1],s[0]);x.push(u);}l.path=x;m=new google.maps.Polyline(l);if(q){m.set("geojsonProperties",q);
}break;case"MultiLineString":m=[];for(var r=0;r<n.coordinates.length;r++){var x=[];for(var p=0;p<n.coordinates[r].length;p++){var s=n.coordinates[r][p];
var u=new google.maps.LatLng(s[1],s[0]);x.push(u);}l.path=x;m.push(new google.maps.Polyline(l));}if(q){for(var o=0;o<m.length;o++){m[o].set("geojsonProperties",q);
}}break;case"Polygon":var w=[];var v;var t;for(var r=0;r<n.coordinates.length;r++){var x=[];for(var p=0;p<n.coordinates[r].length;p++){var u=new google.maps.LatLng(n.coordinates[r][p][1],n.coordinates[r][p][0]);
x.push(u);}if(!r){v=a(x);w.push(x);}else{if(r==1){t=a(x);if(v==t){w.push(x.reverse());}else{w.push(x);}}else{if(v==t){w.push(x.reverse());}else{w.push(x);
}}}}l.paths=w;m=new google.maps.Polygon(l);if(q){m.set("geojsonProperties",q);}break;case"MultiPolygon":m=[];for(var r=0;r<n.coordinates.length;r++){var w=[];
var v;var t;for(var p=0;p<n.coordinates[r].length;p++){var x=[];for(var o=0;o<n.coordinates[r][p].length;o++){var u=new google.maps.LatLng(n.coordinates[r][p][o][1],n.coordinates[r][p][o][0]);
x.push(u);}if(!p){v=a(x);w.push(x);}else{if(p==1){t=a(x);if(v==t){w.push(x.reverse());}else{w.push(x);}}else{if(v==t){w.push(x.reverse());}else{w.push(x);
}}}}l.paths=w;m.push(new google.maps.Polygon(l));}if(q){for(var o=0;o<m.length;o++){m[o].set("geojsonProperties",q);}}break;case"GeometryCollection":m=[];
if(!n.geometries){m=h('Invalid GeoJSON object: GeometryCollection object missing "geometries" member.');}else{for(var r=0;r<n.geometries.length;r++){m.push(e(n.geometries[r],l,q||null));
}}break;default:m=h('Invalid GeoJSON object: Geometry object must be one of "Point", "LineString", "Polygon" or "MultiPolygon".');}return m;};var h=function(i){return{type:"Error",message:i};
};var a=function(m){var l;var j=0;for(var k=0;k<m.length-2;k++){j+=((m[k+1].lat()-m[k].lat())*(m[k+2].lng()-m[k].lng())-(m[k+2].lat()-m[k].lat())*(m[k+1].lng()-m[k].lng()));
}if(j>0){l=true;}else{l=false;}return l;};var g;var f=b||{};switch(c.type){case"FeatureCollection":if(!c.features){g=h('Invalid GeoJSON object: FeatureCollection object missing "features" member.');
}else{g=[];for(var d=0;d<c.features.length;d++){g.push(e(c.features[d].geometry,f,c.features[d].properties));}}break;case"GeometryCollection":if(!c.geometries){g=h('Invalid GeoJSON object: GeometryCollection object missing "geometries" member.');
}else{g=[];for(var d=0;d<c.geometries.length;d++){g.push(e(c.geometries[d],f));}}break;case"Feature":if(!(c.properties&&c.geometry)){g=h('Invalid GeoJSON object: Feature object missing "properties" or "geometry" member.');
}else{g=e(c.geometry,f,c.properties);}break;case"Point":case"MultiPoint":case"LineString":case"MultiLineString":case"Polygon":case"MultiPolygon":g=c.coordinates?g=e(c,f):h('Invalid GeoJSON object: Geometry object missing "coordinates" member.');
break;default:g=h('Invalid GeoJSON object: GeoJSON object must be one of "Point", "LineString", "Polygon", "MultiPolygon", "Feature", "FeatureCollection" or "GeometryCollection".');
}return g;};